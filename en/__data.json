{"type":"data","nodes":[null,{"type":"data","data":[{"html":1,"publications":2,"pathname":3},"\u003Ch1>Simulation Principles in Game Design\u003C/h1>\n\u003Cp>Let's break down the topic into parts and analyze it in detail. An article for game designers and just curious ones.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://i.imgur.com/cmB1bKw.jpg\" alt=\"\" width=\"640\" height=\"360\">\u003C/p>\n\u003Cp>For the main idea I chose «simulation» as the basis for all principles: my belief that now this is where games should develop. These are the attributes that make games fun, and immersive. We want to believe in such worlds, - they absorb us and do not let go. That's when games called an art. This is what I will focus on. Attributes. Principles. Not specific games.\u003C/p>\n\u003Cp>I’ll note right away that in many ways these principles are based on the \u003Ca href=\"https://www.youtube.com/watch?v=1iXNX-U3HqA\" rel=\"noopener\" target=\"_blank\">Design Mantras of the good ol' Arkane Studios\u003C/a>. Still, for my taste, although their mantras have good thoughts in it, but there are 20 of them. It's not easy to keep twenty ideas in your head at the same time. I would like to unite them under some categories and some general idea. So that you can look at a short list, as if it is a cheat sheet, and immediately remember everything important, set your brain, as a game designer, to produce good stuff.\u003C/p>\n\u003Cp>I recommend saving this article to your bookmarks and periodically returning to it. Natural cheat sheet. And for those who are reading purely out of curiosity, or reading about these principles for the first time: welcome to whole reading.\u003C/p>\n\u003Chr>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>How ​​to read this cheat sheet?\u003C/strong>\u003C/p>\n\u003Cp>The general structure is as follows: in total there are 7 principles that a simulation must follow. The first principle is main basis, – around which every little thing is built. The second-third-fourth principles are fundamentally important and often integral to the simulation - try to focus on them first. The fifth-sixth-seventh principles last but not least: they aren't only related to simulations, but they perfectly fit into as big simulation picture: they allow you to reveal the ideas of the simulation in all its glory.\u003C/p>\n\u003Cp>Moreover, I specifically give examples from a variety of genres: simulation elements can be found in absolutely any game. I'm interested in the elements themselves, the rules and principles, not the specific setting, genre or game. Although my soul lies in the Middle Ages, so there will probably be many examples about swords and bows, fields and mills, shovels and rakes, bandit-rogues, or caravan merchants.\u003C/p>\n\u003Cp>Do not be distracted by the pictures. Initially, I wanted to make an article with only one single picture in the preview, - so that the pictures do not limit your imagination and do not reduce your thoughts purely to one specific thing depicted by picture. Though many people love pictures, plus pictures help the eye to catch on to certain places and better navigate the text, so I decided to keep them. But the pictures do not convey the essence of each principle in their fullest. Keep this in mind.\u003C/p>\n\u003Cp>Also keep in mind that everything, as always, still hugely depends on the implementation. The job of a game designer is only half the battle. Good implementation must go in tandem with good ideas, otherwise it won't work. Even the trendsetters themselves, who make the BEST simulations right now, even they can't always follow all of these principles at a time. And for a reason: it’s better to take just a few principles and try to stick to them so each one supports another... It's better than taking all the principles implementing the mechanics at random, haphazardly, – as a result, these mechanics will be rather annoying. I will partially touch this, and someday, perhaps, I will also describe in detail what distinguishes a good implementation from a bad one. Or not. In any case, I recommend subscribing to keep being in contact.\u003C/p>\n\u003Cp>And do not hesitate to re-read the entire article: after all, repetition is the mother of learning.\u003C/p>\n\u003C/blockquote>\n\u003Chr>\n\u003Ch2>Content\u003C/h2>\n\u003Col>\n\u003Cli>\u003Ca href=\"#1\">Systemic Approach\u003C/a>\u003Cbr>\n• The world reacts to itself\u003Cbr>\n• Non-ideal systems\u003Cbr>\n• The opposite of scenario\u003C/li>\n\u003Cli>\u003Ca href=\"#2\">World Ecology\u003C/a>\u003Cbr>\n• The world lives without a player\u003Cbr>\n• Influence of weather effects\u003Cbr>\n• Food chains\u003Cbr>\n• «Needs» system\u003C/li>\n\u003Cli>\u003Ca href=\"#3\">Causality of Everything\u003C/a>\u003Cbr>\n• Nothing comes from nothing\u003Cbr>\n• Everything has a weight and size\u003Cbr>\n• Production chains\u003Cbr>\n• The cycle of «life and death» of objects\u003C/li>\n\u003Cli>\u003Ca href=\"#4\">Object Density\u003C/a>\u003Cbr>\n• The world is rich with interactive objects\u003Cbr>\n• The world feels crafted\u003Cbr>\n• Don't fool with interactivity\u003C/li>\n\u003Cli>\u003Ca href=\"#5\">Gameplay Over Story\u003C/a>\u003Cbr>\n• Pay with mechanics for the story\u003Cbr>\n• Narrative urgency\u003Cbr>\n• Stories through the environment\u003C/li>\n\u003Cli>\u003Ca href=\"#6\">Level Design Flexibility\u003C/a>\u003Cbr>\n• Short paths in labyrinths\u003Cbr>\n• Shortcuts and verticality\u003Cbr>\n• Door means you can go through\u003Cbr>\n• «Image of the City» by Kevin Lynch\u003C/li>\n\u003Cli>\u003Ca href=\"#7\">Implicit Original Solutions\u003C/a>\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch2 id=\"1\">1. Systemic Approach\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://i.imgur.com/huFqRFr.jpg\" alt=\"\" width=\"640\" height=\"360\">\u003C/p>\n\u003Cp>Push systems against each other, - let their functionality intertwine, and new features are born in this intersection. They even came up with a special term for this: emergence.\u003C/p>\n\u003Cblockquote>\n\u003Cp>Emergence occurs when a complex entity has properties or behaviors that its parts do not have on their own\u003C/p>\n\u003Cblockquote>\n\u003Cp>Wikipedia\u003C/p>\n\u003C/blockquote>\n\u003C/blockquote>\n\u003Cp>Probably the easiest way to push two systems against each other is through the possibility of error, the planned imperfection of the systems.\u003C/p>\n\u003Cp>Example: the physics of car movement in GTA is, as it were, a little «imperfect», mathematically speaking. It's not absolute, not instantaneous: it’s not enough just to slow down, but there is such a thing as inertia. Whereas artificial intelligence is relatively simple, and does not particularly take into account this inertia. In total, the player can sometimes see such a picture: a small car accident (barely a collision), after which another driver gets out of the car, shouts some insults to another, throws the enemy out of the car, and a fight starts. By itself, this fight of drivers is not some special scenario, directly programmed by the code. This behavior is born from the collision of two systems: the imperfection of physics, the imperfection of artificial intelligence. And the interaction is born from small common points of contact with the logic of the level: «If someone hit you, you need to hit him back».\u003C/p>\n\u003Cp>For such a situation, to not be completely unique and impossible, the imperfection of GTA physics is aggravated by making the AI ​​a little more imperfect than it should be, – so those events can occur at least just rarely. Different NPCs have different characteristics, and not all of them are good drivers. Some react worse, slow down later than they should, and thus are more likely to have a car accident.\u003C/p>\n\u003Cp>But in order to have something to collide with, we need, in fact... Systems. What are systems in game design and programming?\u003C/p>\n\u003Cp>Many game designers will give you a definition something along the lines of «a system is something that works all the time, whereas things that only work sometimes are mechanics». In the field of programming, there is a pattern «ECS», - Entity, Component, System. In this pattern, all systems are an integral part of the so-called «game loop».\u003C/p>\n\u003Cblockquote>\n\u003Cp>For those who do not know what a game loop is, a brief intro: this is such an «infinite loop» - which works as much as the game itself works. It calculates various parameters for the functioning of the game, – every second, most often every 16 milliseconds, so that the game has time to draw 60 frames per second.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Systems, being part of this cycle, are infinitely working, too. So, in essence, the definition of a system for programmers is exactly the same as for game designers: the system is something that always works. Literally. Like physics system, artificial intelligence, etc.\u003C/p>\n\u003Cp>Instead of building systems, games sometimes define the behavior of NPCs in «scripts», – a word that comes from filmmaking and essentially means a scenario, a well-defined sequence of actions. But this approach creates the effect of a movie rather than a game. Still, the main advantage of games is in some extraordinary dynamics between what is on the screen and the player. The scenario approach can be useful sometimes, in some places where you want to achieve specific emotions, create a 100% controlled cinematic effect. The scenario and scripts are also important. But the best way to achieve the very dynamics inaccessible to films and only characteristic to games, – a variety of systems.\u003C/p>\n\u003Ch2 id=\"2\">2. World Ecology\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://i.imgur.com/PzwVypt.jpg\" alt=\"\" width=\"640\" height=\"360\">\u003C/p>\n\u003Cp>\u003Cstrong>Nature diversity\u003C/strong>. Biomes: forest, plain, mountain, swamp, desert, snow. Natural objects: rivers, caves, waterfalls, volcano. If the game uses a tiled approach to building terrain, then even within the same type of tile, make some variety: ordinary grass and dense grass, two variations of dry ground, deep and shallow water. Several types of trees.\u003C/p>\n\u003Cp>\u003Cstrong>Weather effects\u003C/strong>. This is not only a visual effect, but they also have some, even if insignificant, gameplay impact: and they affect not only the player, but also the creatures living in the world, their behavior. Creatures hide from heavy rain, and cats hide from even light rain. The torch shines worse, or may even go out wet. The high temperature can set fire to some bush, which by its chain reaction, like a butterfly effect, – can set a whole forest on fire.\u003C/p>\n\u003Cp>\u003Cstrong>Creatures and activities\u003C/strong>. Creatures must constantly have things to do, that they need, - something besides killing the player. The player must feel that the world does not revolve around him, but lives on his own. Enemies should not just stand and wait for player to come and destroy them, but they should be engaged in some of their own activities: eat, hunt, sleep, have fun, wash. Wild animals can sometimes fight each other in competition for prey, and bandits may not be able to share the loot among themselves and also fight. Merchants can trade with normal villagers, not just the player. And when there are no customers, merchants can sometimes walk around the store, arrange or rearrange items in the windows, placing the most valuable items in the most presentable places - returning to the counter only when a visitor enters them.\u003C/p>\n\u003Cp>\u003Cstrong>Food chains\u003C/strong>. They do not have to be exclusively among wild animals, ala the rabbit eats carrots, and the fox and wolf eat the rabbit. There may be more tricky chains among humanoids too:\u003C/p>\n\u003Cul>\n\u003Cli>Merchants make a living by trading, →\u003C/li>\n\u003Cli>Bandits rob merchants, →\u003C/li>\n\u003Cli>Guards catch bandits, →\u003C/li>\n\u003Cli>War takes the lives of guards\u003C/li>\n\u003C/ul>\n\u003Cp>Of course, these processes should not flash before the eyes of the player 24/7 and thus bore the player. On the contrary, bandits can attack a merchant very rarely, - and then live on the loot for a long time. Guards may not always find bandits, if they accept a peasant request to look at all. And the war of the kingdoms can be an even rarer event, if not an important scenario moment. But it is not enough just to make some event rare: there must be a wide variety of such events themselves. Then, despite the fact that a particular individual event may happen rarely, in general, something interesting should always be happening. Food chains will provide some minimum interaction of the world with itself.\u003C/p>\n\u003Cp>\u003Cstrong>«Needs™»\u003C/strong>. Drinking and eating, - should not be only the need of the player. But also of the NPC. Very cool needs system is implemented in the Sims series. While the game's focus on Tamagotchi-level gameplay is something I personally don't like, the mechanics behind their needs system are quite ingenious, and even Bethesda's Radiant AI schedules system can envy it. This approach allows you to efficiently organize very complex behaviors, and expand their diversity almost unlimitedly, if necessary.\u003C/p>\n\u003Cul>\n\u003Cli>Needs can be static: to eat / drink / have fun / sleep, - which are essentially inherent in all creatures\u003C/li>\n\u003Cli>Needs can also be semi-static: they are added to the character when he or she is created or born. For example, the «drunkard» character trait makes the character sit at least half a day in a tavern, drinking, - even if it costs the last pennies to pay. Thus, these perks already bring variety and some kind of funny caricature to creatures and, in particular, to humanoids. Many games would benefit it\u003C/li>\n\u003Cli>Needs can be completely dynamic. For example, if an NPC visits a castle, then he has a need like «Enjoy the Castle» - forcing him to lookup interior objects closely: various statues, armor racks, paintings, and other beautiful elements of the castle\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>The mechanism of how needs work\u003C/strong> is surprisingly simple: there is some activity that the NPC is currently engaged in, and when it's done, they must analyze other needs in order to decide which need he most needs to satisfy now.\u003C/p>\n\u003Cp>The distribution of importance for each individual need may vary. For example, 10% fun is of course a disaster, but only 10% of satiety is a direct ALARM: you need to eat urgently, first of all! Whereas, on the contrary, with high rates of all needs, the need for entertainment will have a much greater weight compared to the rest. After all, overeating is bad, but there is hardly too much entertainment.\u003C/p>\n\u003Cp>And in order to make this system a little more unpredictable, it is desirable to make the NPC not always choose the most optimal choice. For example, choose randomly from the three most urgent needs instead - this will make the system a little less ideal and therefore more interesting and potential to intersect with other systems.\u003C/p>\n\u003Ch2 id=\"3\">3. Causality of Everything\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://i.imgur.com/Fzue8Bp.jpg\" alt=\"\" width=\"640\" height=\"360\">\u003C/p>\n\u003Cp>Full-fledged simulations are difficult to build, so there is a great temptation to imitate rather than simulate. To show that there is some life in the game, but to achieve this feeling as cheaply as possible or at all only by visual means. This creates a fragile immersiveness that breaks down too easily. Indulging in this lure of imitation before simulation will most often achieve the exact opposite result.\u003C/p>\n\u003Cp>Say, when a player enters a merchant, with a 50% probability there are buyers in front of him, and he has to wait a bit before interacting with merchant. If for the first time he can be deceived and think: «What a deeply developed world, here even NPCs trade with each other, that there are even queues» - but as soon as he understands that these queues do not arise due to some natural reasons, but literally spawn in front of him, then at this moment the player can become furious to the game: it deceives him and simply wastes his time. Instead of immersion, the player complains about the game and the developers: his perception is no longer inside the world, but somewhere outside. The immersion is broken. The game designer screwed up.\u003C/p>\n\u003Cp>The same applies to passers-by moving away behind the player, and appearing suddenly in front of his eyes, a cheap trick used too often in games.\u003C/p>\n\u003Cp>\u003Cstrong>For something to appear, it has to come from somewhere first\u003C/strong>. So you have to forget about spawning creatures, items, or resources during the game. Merchants do not have infinite gold, there are no infinite goods, and there are no automatically replenished supplies: they must physically get the goods from somewhere, not spawn their items in pockets.\u003C/p>\n\u003Cp>And say no to plastic cards with a balance of gold coins in the Middle Ages - a character cannot carry millions of gold in the interface. Because \u003Cstrong>gold and other items take up weight and inventory space\u003C/strong>.\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>Disclaimer\u003C/strong>: of course, just involving weight and size to everything is not enough, even including money. This might only make the game inconvenient and stupid. To make this sensible in games, you should support this decision by other mechanics. For example, provide horse with good bags, or a car with interactive trunk. Or give ability to hire people who can carry your weight, too.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Naturally mined stones should not regenerate out of thin air: some type of resource may not be renewable. Nearly every item that the player can find, or that a merchant can sell, must be produced or mined in one way or another by the world and its inhabitants. These in-game items feel a little more real, and therefore more valuable: there is an entire simulated economy behind them!\u003C/p>\n\u003Cp>An exception may be some rare artifacts that simply exist somewhere in the world, and were added to the world when it was created, in singular quantities. But the rest cases, non-unique items must somehow circulate in the economy, naturally.\u003C/p>\n\u003Cp>Any game in this sense, regardless of genre, should essentially become «a bit of a strategy» - I mean functionally, but not necessarily gameplay-wise. Such elements of the strategy as economy and production, production chains, should occur in the game, but are not required to be performed by the player at all.\u003C/p>\n\u003Cp>\u003Cstrong>The cycle of life and death of objects\u003C/strong> will help you getting rid of what's called «inflation and overproduction». Without the death of items, the economy will go to a full stop eventually. Starting with the final steps - say, steel swords, and further down: first, all swords will be forged, warehouses will be filled, then the miner will have nowhere to put iron. Due to lack of work, miner will stop earning bread, and baker there will be no need to produce this bread anymore, and so on. The economy will collapse. Therefore, items must have some form of death, preferably several types of death.\u003C/p>\n\u003Cp>Example: a sword created by a blacksmith, which has gone through a dozen production chains, must somehow find its death. The sword must be destroyed. Training swords can deteriorate due to training. And for combat swords to deteriorate, there must be some local battles, battles with bandits, and/or a war between entire kingdoms. Then, after the battle, broken weapons will be collected, after which they will be melted back into iron ingots in order to forge something out new again. Alternatively, swordsmen can go to fight in some portal of other dimensions - where they will die. Then the economy will completely lose the sword in its entirety - which is even more powerful form of death of an object. Such a total death of the item will give much more space for the resumption of production. The same applies to the lives of warriors.\u003C/p>\n\u003Cp>All these «tricks» meant to prolong the life of the world as a whole, and perhaps it can even be cycled this way, to create an ever-living world. For some games, however, a variant of a time-limited world might be suitable, where at some point in the game the credits will go, or the score screen will be shown - and on this the world will kind of “die”. The main thing is that it should be a thoughtful decision from the very beginning, not some decision that you bumped into because you failed to create an economy.\u003C/p>\n\u003Cp>\u003Cstrong>Honest simulation, as opposed to imitation\u003C/strong> - also implies causality for creatures too: the lumberjack not only stands forever and cuts wood, but also goes to his house at least to sleep, probably has a wife and children, goes to pray once a month to church, and on weekends to the market, and so on. Not necessarily on strict schedule of course, but you get the idea. And he also eats and drinks every day, and if he has nowhere to get food, for many days in a row, then he will die.\u003C/p>\n\u003Cp>It is not necessary to directly simulate absolutely everything in full scale: it is at least impossible. Secondly, not needed at all. For example, if from our world you don’t like that creatures need to poop, that’s it, it’s decided: in the world you created, no one needs to poop! That's great.\u003C/p>\n\u003Cp>\u003Cstrong>Some decisions may inflict overly long-term commitments\u003C/strong>. For example, if NPCs still have to eat and drink, and they can die if they don’t have enough of it, then this requires hard work on balance. Such a world can turn out to be very fragile: somewhere the fish ran out and this fisherman began to die, and the whole village after that - which essentially lived on fish. There is hardly anything that can be advised here, in addition to making auxiliary tools that will help identify such problems: ideally, the world should be stable enough at least without a player. But even with a player, the world shouldn't fall apart in an instant matter. It is considered a very cool idea to program AI-players who, as a player, having all the same capabilities and abilities, would play the game, even if according to a simplified scenario. Since everything is too individual, some ready-made solutions will not suit you: there are no AI-testers yet. You will have to develop additional tools for the specifics of your particular game. Not necessarily full-fledged AI-players, but some kind of automated checks, for sure. For some reason, this is still not very popular in the gaming industry, although some are trying to create such tools. In software development, such automated tests are all over the place: such instruments allow you to achieve system stability. After all, even the slightest change in the components of the system can lead to dramatic changes in the operation of the system as a whole. In order to develop such a complex dynamic world, you will probably have to adopt this good practice of creating automated testing systems from the field of software development - now in game development.\u003C/p>\n\u003Cp>There are also technical limitations to how much of the world you can simulate at once. The general principle here is perhaps this: «The more the better, but not at the costs of poor optimization». With enough large world, and a large number of systems, and their complexity, of course, it will not be possible to fully simulate the entire world. You will have to somehow «cheat» a little, and in addition to the main simulation algorithm, - to transfer distant locations from the player to the so-called «background mode».\u003C/p>\n\u003Cp>Instead of spawning NPCs every time, \u003Cstrong>switch existing creatures between foreground and background mode\u003C/strong> as needed. Even in this mode, try to take into account everything that would happen anyway, without simulating all the smallest details. In a normal situation, the calculation of the position occurs with an high frequency, for a feeling of smoothness: you can leave this calculation algorithm itself but reduce the frequency of recalculations, thus the NPCs will move “jagged”, but there is nothing wrong with that as long as far beyond the player's line of sight. Other problems may arise here: for example, due to teleport-like jaggies movement, an NPC can accidentally pass through a wall and get stuck there: so you should not overdo with this either. Pathfinding and collision calculation are traditionally considered one of the most power-hungry runtime algorithms in games - which means background mode can save on them a lot. But such things as artificial intelligence and decision making, traditional algorithms, relatively speaking, - they eat fewer resources. From other side though, decision-making systems are more difficult to think through. No easy way out.\u003C/p>\n\u003Cp>If, nevertheless, the world turns out to be too large and complex, and you need to completely stop simulating creatures and resort to the spawn-despawn mechanics, then consider at least the option of a background mode not at the level of the creature, but at the level of the settlement or locations. AI-location. Where the fate of the creatures will be calculated by a more general singular and efficient algorithms. Then the creatures themselves can be removed from the world, but a replica of information about them to be left, which will be gradually modified by a general algorithm, and some parameters do not have to be calculated at all. You don't have to simulate their need for food, for example - these parameters can be dynamically calculated from the general table at the time of spawn. Let's say that the NPC is supposed to eat at certain hours of the game time: 6 am, 12 noon, 18 pm. This means that during these hours at the time of spawning, their need for food must be 100% satisfied - and this parameter can be dynamically calculated for other hours in percentage terms. This approach is already closer to imitation, but still much better than modern game \u003Ca href=\"https://www.youtube.com/watch?v=dQ65MK5ZnHQ\" rel=\"noopener\" target=\"_blank\">lumberjacks chopping the same tree all day long\u003C/a>.\u003C/p>\n\u003Cp>The more complex the main simulation algorithm, the more difficult it will be to simulate the background. In simpler approaches, but also at the same time more honest approaches, unless you're making an RTS - you still better optimize the background.\u003C/p>\n\u003Cp>Sufficiently skillful background mode will not be noticeable on one hand, and be useful enough to involve a certain dynamic to the world to distant locations from the player. It's a matter of craft and professionalism how much you can optimize out of it while still having a dynamic world that is constantly changing. A whole series of articles can be written about this single «Causality of Everything» topic... Let's consider this one as an introductory one.\u003C/p>\n\u003Ch2 id=\"4\">4. Object Density\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://i.imgur.com/RH7s51f.jpg\" alt=\"\" width=\"640\" height=\"360\">\u003C/p>\n\u003Cp>If you are making a forest, it would seem that innate property, coming from real forests - is to be rather boring and empty location. Do not make it too empty! We are not designing a boring reality, but designing an interesting simulation-simulacrum. Try to diversify each forest with various interactivity so it feels more dense. You can hunt animals there. Collect meat and skins from them. Or vice versa: you need to run away from some of them (wolves, bears). You can collect mushrooms or berries. Or buried treasure - which the player can know about from gossip or find purely by himself on accident. Or a hidden passage into the dungeon, not noticeable at glance. Each such object an interactivity adds meaning to such a location, making it fell more densely populated for just «a boring forest». It's not boring anymore.\u003C/p>\n\u003Cp>At any point on map, there should be interactive objects nearby, preferably several. Objects can be from small to large, meaning not size but their importance. A tree - even if it is an object of interaction and a source of resources, but in general, this is an object of very little importance: there are many trees. A chest or a corpse that can be looted is an object of high importance, there are relatively few of them. The game should be a balance between them, not abusing just one single activity everywhere, like lootable monster corpses with gold in them.\u003C/p>\n\u003Cp>It is not necessary to show the icons of every barrel and every hidden treasure on the map to the player though - this can, on the contrary, spoil the impression of surprise and make too much focus on something insignificant. Putting icons on minor things will make them more visible, but not more significant: keep them modest and inconspicuous. For those players who are still exploring the world, make sure that the world is densely filled, but let them find this little treasure themselves: countless tens and hundreds of icons are not needed.\u003C/p>\n\u003Cp>If you are making an item that is interactive, like a barrel that can be opened, then don't fool with player - and make sure there are some items in there. Otherwise you fail the density object rule: there are objects of interaction, but there is no sense in them. The world will feel empty, made in haste or generated - such empty interactive objects will only create clutter on the screen.\u003C/p>\n\u003Cp>Do not forget about other principles, let me remind you: ideally, the world itself should interact with all these barrels-chests. Just like with creatures, objects of interaction do not have to exist for the player alone to loot them. NPCs should use containers too. At the very least, if it's some kind of lootable cupboard in a tavern, or a chest in someone's house: it should be used. And this is not just some whim of a simulation adept for the sake of some “realism”. If you have an RPG, for example, and there is a thief class, then such a function will create additional opportunities to play your role: and steal something from the chest, instead of risking rummaging through NPC pockets.\u003C/p>\n\u003Ch2 id=\"5\">5. Gameplay Over Story\u003C/h2>\n\u003Cp>History is important. Gameplay is more important: game are gameplay first of all. Therefore, be sure to make a story, a plot but \u003Cstrong>don't do quests for the sake of quests\u003C/strong>. Don't make them just to fill the map with icons. Do not make them so that the character has something to level-up. Instead, for every mission or quest with cutscenes or dialogues, immediately introduce the player to the new mechanics. If all the core mechanics have already been used, then give the player some small new feature, even built on the existing mechanics - that you created just for this quest.\u003C/p>\n\u003Cp>The tiny helicopter in Vice City would be a great example if only so many people didn't complain about how complicated it was. In any case, it should be something that the player probably hasn't done yet, or even will never do at all - at least the rest of the playthrough. It doesn't always have to be big and completely unique mechanics like GTA5's crane control, which is a cool feature. The main focus to make it \u003Cem>feel unique\u003C/em>. I used the helicopter as an example, because at its core, it does not introduce new mechanics: it is literally the mechanics of an already existing full-sized helicopter - only in miniature format. But that made the experience no less unique and original, having to navigate your helicopter INSIDE building... Feels unique.\u003C/p>\n\u003Cp>\u003Cstrong>Try to keep the main story always bringing something new\u003C/strong>. Whereas optional missions are allowed to be more repetitive, such as a series of street races, a series of assassination contracts, a series of theft contracts, a pizza delivery series. But it is better not to make these activities endless: even the most loyal player in the whole world will not be able to play your game an infinite number of times. If you still really want to make activities endless, then motivate them by rewarding not punishing: come up with some kind of bonus or unlockable achievement which players gets after a certain number of repetitions of such tasks. In a sense, hint to the player:\n“Here you have already done everything, and nothing new should be expected here.”\u003C/p>\n\u003Cp>\u003Cstrong>Narrative urgency\u003C/strong>. A typical picture would be the following: the main character must urgently save someone, most often from death. Narrative urgency. While you, as a player, go-and-do all sorts of random things: drink a mug of ale in a tavern, play cards, pick up a couple of courtesans. And then in the very first cutscene you show the impression of a true savior urgently running to the rescue - a semantic conflict between the plot and gameplay... And this is not a player's problem. Of course, this problem does not arise if the player ignores the game itself - and just runs through the story without being distracted by anything. But this approach should not be the norm, and developers should somehow take this into account, at least in places where it really matters.\u003C/p>\n\u003Cp>In addition to the obvious \"get around the problem\" by not introducing narrative urgency, you can also give the game a visible feedback to react to the player's behavior. Let's say there is an urgent quest to rescue the hostages... The game won't tell you in advance, but if you do some random activities far too long, then at the end of the quest the game reacts correctly: and then some general lectures you that they say EIGHT PEOPLE died because of the fact that you procrastinated. Relationships with key people deteriorate - and towards the end of the game, these relationships will affect, for example, the outcome of the whole plot. Then there is no such dissonance between the plot and the gameplay. Of course, branching like this is more difficult to do, it's extra work that not all players will see - but it is the price of the decision to add narrative urgency to the game.\u003C/p>\n\u003Cp>\u003Cstrong>The story can often be told without breaking away from the gameplay\u003C/strong>. Use it. If there is some abandoned house in the forest, then show why it is abandoned. Perhaps there is a skeleton of a hunter who has grown old in solitude. Or maybe he is not just old: he has sign on door of the Black Death, thus he is affected. Or an infected crop near the house. Poisoned pond, or something else noticeable that can help conclude how he died.\u003C/p>\n\u003Ch2 id=\"6\">6. Level Design Flexibility\u003C/h2>\n\u003Cp>Let the locations be labyrinths with many solutions. Use unlockable shortcuts - \"the holes in the maze\". So that when some part of the location was explored by the player, the player could quickly skip it, instantly passing from beginning to end, and backwards. The obvious path to the goal should always have an alternative, a bypass. Use verticality. If there is a door, it should be possible to go through. Either find the key or steal it. Or lockpicks. A crowbar. Break through window, cellar or roof - and open the door from the other side. Or just knock: maybe the enemies will open. Use your imagination.\u003C/p>\n\u003Cp>A good settlement, according to Kevin Lynch's «The Image of the City», should contain the following five types of elements:\u003C/p>\n\u003Cp>\u003Cstrong>Nodes\u003C/strong>, are road intersections and associated locations like a market or a tavern. Usually densely populated.\u003C/p>\n\u003Cp>\u003Cstrong>Landmarks\u003C/strong>, are singular, unique and memorable elements. statues or towers. As a rule, they are visible from different sides, or noticeable different from neighboring objects due to height, size, or special placement.\u003C/p>\n\u003Cp>\u003Cstrong>Paths\u003C/strong>, - as you might guess, these are roads. But the roads themselves can vary, and be either a well-trodden path or good masonry. There may be narrow and wide roads. Broken and new.\u003C/p>\n\u003Cp>\u003Cstrong>Edges\u003C/strong>, - a place where one environment translates into another: walls, fence, gate or shoreline. The border does not have to be impassable: the main thing is that it is visually recognizable.\u003C/p>\n\u003Cp>\u003Cstrong>Districts\u003C/strong>, - city areas with some homogeneity. The nature of the area can be determined by the architecture of the buildings, functions of the area, the density of buildings and population, terrain, social characteristics of the inhabitants and overall wealthness.\u003C/p>\n\u003Cp>On large scale, maps can also be designed according to this structure: for example, the capital of the kingdom, to where many roads lead - will be considered a node. The surrounding villages will be districts. As landmark there will be a giant portal structure in the center of the map. And the natural terrain in the form of mountains and rivers, an outpost with gates, and a tower with archers - can serve as surround edges.\u003C/p>\n\u003Ch2 id=\"7\">7. Implicit Original Solutions\u003C/h2>\n\u003Cp>If a game situation arises where the player comes up with an original solution, this solution should be supported by game design: the solution should work. Moreover, there is no need to prompt these decisions to the player: do not take away the joy of discovery from him.\u003C/p>\n\u003Cp>For example, in Half-Life there is a moment where you can block a door from Combine soldiers. This possibility is not given to the player explicitly, there's no notice: “block the door immediately”. The player needs to push the surrounding objects to the door with the model of his character. Pretty much the thing you can do in any game. But and what’s special here: NPCs not just «not enter» and glitch there. Instead, they move into position near the window and start firing the building you're in - at random, without even seeing you. This game functionality is given implicitly.\u003C/p>\n\u003Cp>Another example is the monster world of Dark Souls, where it would be strange to give the opportunity to knock on the door. However, there is one metal door in the game that you can still knock on... Kinda. To do this, you need to hit the door with a weapon, and then the monsters (hollow) will react to this sound by opening the door from the inside.\u003C/p>\n\u003Cp>Such situations allow the player to think creatively, and rejoice when his ideas really work. Of course, you do not need to make your main focus around it, otherwise the game will turn into a puzzle instead of simulation.\u003C/p>\n\u003Cp>A good balance between these principles is allowing to show the best side of what simulation can provide us, - and not just simulations but games in general.\u003C/p>\n\u003Cp>#simulation #immersivesim #gamedesign #games\u003C/p>",[],"/en"],"uses":{"params":["lang","article"],"url":1}}]}
